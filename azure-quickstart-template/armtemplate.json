{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Choose the Azure region that's right for you and your customers. Not every resource is available in every region."
            }
        },
        "appName": {
            "type": "string",
            "defaultValue": "[concat('strapi', uniqueString(resourceGroup().id), '-app')]",
            "metadata": {
                "description": "Name of the Strapi web app on App Service"
            }
        },
        "databaseClient": {
            "type": "string",
            "defaultValue": "postgres",
            "allowedValues": [
                "mysql",
                "postgres"
            ],
            "metadata": {
                "description": "Type of database server to use. Currently, PostgreSQL and MySQL are supported"
            }
        },
        "databaseAdminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username used to connect to the Strapi Database Server"
            }
        },
        "databaseAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password used to connect to the Database Server"
            }
        },
        "storageAccountPublicAccessEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable or disable public access to the blob storage account that will be used to store Strapi media files. If disabled, only private access will be allowed."
            }
        },
        "emailDataLocation": {
            "type": "string",
            "defaultValue": "unitedstates",
            "allowedValues": [
                "africa",
                "asiapacific",
                "australia",
                "brazil",
                "canada",
                "europe",
                "france",
                "germany",
                "india",
                "japan",
                "korea",
                "norway",
                "switzerland",
                "uae",
                "uk",
                "unitedstates"
            ],
            "metadata": {
                "description": "The geography associated with the Azure communication service resource used for sending email. This location determines where your email data will be stored at rest. Choose a location that best fits your compliance and data residency requirements."
            }
        },
        "applicationMode": {
            "type": "string",
            "defaultValue": "development",
            "allowedValues": [
                "development",
                "production"
            ],
            "metadata": {
                "description": "Use development mode to start, develop, or test your Strapi application. For production, always set it to production mode, which disables edit controls for the content type builder."
            }
        }
    },
    "variables": {
        "appNameShortened": "[take(replace(parameters('appName'),'-',''), 9)]",
        "uniqueNameSuffix": "[toLower(concat(variables('appNameShortened'), '-', uniqueString(parameters('appName'), resourceGroup().id)))]",
        "hostingPlanName": "[concat('asp-', variables('uniqueNameSuffix'))]",
        "tags": {
            "AppProfile": "Strapi"
        },
        "artifactLocation": "https://github.com/Azure-Samples/strapi-on-appservice-sample/raw/refs/heads/main/strapi-packages/strapi-on-appservice-demo.zip",
        "startupCommand": "[if(equals(toLower(parameters('applicationMode')),'development'), 'npm run develop', '')]",
        "containerStartTimeLimit": "900",
        "scmDoBuildDuringDeployment": true,
        "autoGeneratedDomainNameLabelScope": "TenantReuse",

        "isAppInProdMode": "[equals(toLower(parameters('applicationMode')), 'production')]",
        "numberOfWorkers": 1,
        "linuxFxVersion": "NODE|22-lts",
        "skuName": "[if(variables('isAppInProdMode'), 'P1V3', 'P0V3')]",
        "skuTier": "PremiumV3",
        "publicNetworkAccess": "Enabled",
        "websitePort": 1337,
        "alwaysOn": true,

        "storageAccountName": "[concat(replace(variables('uniqueNameSuffix'), '-',''), 'sa')]",
        "blobServiceName": "default",
        "blobContainerName": "[concat('blob', variables('uniqueNameSuffix'))]",
        "storageAccountType": "[if(variables('isAppInProdMode'), 'Standard_RAGZRS', 'Standard_GRS')]",
        "storageAccountKind": "StorageV2",
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowSharedKeyAccess": false,
        "defaultToOAuthAuthentication": true,
        "storageAuthType": "msi",
        "networkAclsBypass": "AzureServices",
        "networkAclsDefaultAction": "Allow",
        "keySource": "Microsoft.Storage",
        "encryptionEnabled": true,
        "blobPublicAccessLevel": "[if(parameters('storageAccountPublicAccessEnabled'), 'blob', 'None')]",
        "deleteRetentionPolicy": {
            "enabled": true,
            "days": 7
        },
        "containerDeleteRetentionPolicy": {
            "enabled": true,
            "days": 7
        },

        "isPostgres": "[equals(parameters('databaseClient'), 'postgres')]",
        "databaseVersion": "[if(variables('isPostgres'), '16', '8.0.21')]",
        "databaseServiceName": "[if(variables('isPostgres'), 'Microsoft.DBforPostgreSQL/flexibleServers', 'Microsoft.DBforMySQL/flexibleServers')]",
        "databaseResouceType": "[concat(variables('databaseServiceName'), '/databases')]",
        "databasePort": "[if(variables('isPostgres'), 5432, 3306)]",
        "databaseServerName": "[concat(variables('uniqueNameSuffix'), '-', parameters('databaseClient'), '-dbserver')]",
        "databaseName": "[concat('strapi_', variables('uniqueNameSuffix'), '_db')]",
        "databaseSsl": "true",
        "serverEdition": "[if(variables('isAppInProdMode'), 'GeneralPurpose', 'Burstable')]",
        "dbSkuName": "[if(variables('isAppInProdMode'), 'Standard_D2ds_v4', 'Standard_B1ms')]",
        "postgresStorageDiskType": "Premium_LRS",
        "postgresStorageDiskTier": "P10",
        "storageAutoIoScaling": "Enabled",
        "storageSizeGB": 32,
        "databasePublicNetworkAccess": "Disabled",
        "storageAutoGrow": "Enabled",
        "highAvailability": "[if(variables('isAppInProdMode'), 'ZoneRedundant', 'Disabled')]",
        "mySqlStorageRedundancy": "ZoneRedundancy",
        "backupRetentionDays": 7,
        "databaseCharset": "utf8",
        "databaseCollation": "[if(variables('isPostgres') ,'en_US.utf8', 'utf8_general_ci')]",

        "commServiceName": "[concat(variables('uniqueNameSuffix'), '-acsendpoint')]",
        "emailCommServiceName": "[concat(variables('uniqueNameSuffix'), '-emailacsendpoint')]",
        "emailDomainTitle": "AzureManagedDomain",
        "acsSenderName": "donotreply",
        "acsLocation": "global",
        "acsDomainManagement": "AzureManaged",
        "enableAcsEngagementTracking": "Disabled",

        "kvName": "[concat(take(variables('uniqueNameSuffix'), 21), '-kv')]",
        "kvSku": "standard",
        "kvEnabledRbac": true,
        "kvPublicNetworkAccess": "Disabled",
        "kvPrivateEndpointName": "[concat(variables('kvName'), '-private')]",
        "kvPrivateEndpointGroupName": "vault",
        "kvPublicDNSZoneForwarder": ".vaultcore.azure.net",

        "vnetName": "[concat(variables('uniqueNameSuffix'), '-vnet')]",
        "vnetAddressPrefix": "10.0.0.0/16",
        "appServiceSubnetName": "[concat(variables('uniqueNameSuffix'), '-appsubnet')]",
        "appServiceSubnetPrefix": "10.0.0.0/25",
        "databaseSubnetName": "[concat(variables('uniqueNameSuffix'), '-dbsubnet')]",
        "databaseSubnetPrefix": "10.0.1.0/25",
        "kvSubnetName": "[concat(variables('uniqueNameSuffix'), '-kvsubnet')]",
        "kvSubnetPrefix": "10.0.2.0/27",

        "dbPrivateDomainSuffix": "[if(variables('isPostgres') , '.postgres.database.azure.com', '.mysql.database.azure.com')]",
        "dbPrivateDnsZoneName": "[concat(variables('uniqueNameSuffix'), '-privatelink', variables('dbPrivateDomainSuffix'))]",
        "kvPrivateDnsZoneName": "[concat('privatelink', variables('kvPublicDNSZoneForwarder'))]",

        "managedIdentityName": "[concat(variables('uniqueNameSuffix'), '-sid')]",
        "customEmailContributorRoleId": "[guid(resourceGroup().name, variables('commServiceName'), 'CustomEmailContributorRole')]",
        "storageBlobContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
        "kvSecretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",

        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "appSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appServiceSubnetName'))]",
        "databaseSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('databaseSubnetName'))]",
        "kvSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('kvSubnetName'))]",
        "dbPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dbPrivateDnsZoneName'))]",
        "kvPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('kvPrivateDnsZoneName'))]",
        "kvPrivateEndpointId": "[resourceId('Microsoft.Network/privateEndpoints', variables('kvPrivateEndpointName'))]",
        "kvPrivateZoneGroupResourceId": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('kvPrivateEndpointName'), concat(variables('kvPrivateEndpointGroupName'), 'PrivateDnsZoneGroup'))]",
        "dbVnetLinkResourceId": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('dbPrivateDnsZoneName'), 'vnet-link')]",
        "kvVnetLinkResourceId": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('kvPrivateDnsZoneName'), 'vnet-link')]",
        "managedIdentityResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "acsAccountId": "[resourceId('Microsoft.Communication/CommunicationServices', variables('commServiceName'))]",
        "ecsAccountId": "[resourceId('Microsoft.Communication/emailServices/domains', variables('emailCommServiceName'), variables('emailDomainTitle'))]",
        "databaseServerId": "[resourceId(variables('databaseServiceName'), variables('databaseServerName'))]",
        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "kvResourceId": "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "webAppResourceId": "[resourceId('Microsoft.Web/sites', parameters('appName'))]",
        "secretGenerateDeploymentId": "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}', parameters('appName'), 'strapiSecretGeneration'))]",

        "databaseApiVersion": "[if(variables('isPostgres'), '2024-11-01-preview', '2023-12-30')]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2024-11-01",
            "name": "pid-4127740a-b7c4-454b-bf97-db52f8502e66-partnercenter",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },

        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2024-11-30",
            "name": "[variables('managedIdentityName')]",
            "location": "[parameters('location')]",
            "properties": {},
            "tags": "[variables('tags')]"
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "2022-04-01",
            "name": "[variables('customEmailContributorRoleId')]",
            "properties": {
                "roleName": "[concat('Custom Email Contributor - ', uniqueString(resourceGroup().id))]",
                "description": "Custom Email Contributor role for Azure Communication Services",
                "assignableScopes": [
                    "[resourceGroup().id]"
                ],
                "permissions": [
                    {
                        "actions": [
                            "Microsoft.Communication/communicationServices/Read",
                            "Microsoft.Communication/communicationServices/Write"
                        ]
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(variables('ecsAccountId'), variables('managedIdentityName'), 'CustomEmailContributor')]",
            "scope": "[variables('acsAccountId')]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('customEmailContributorRoleId'))]",
                "principalId": "[reference(variables('managedIdentityResourceId'), '2024-11-30').principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[variables('managedIdentityResourceId')]",
                "[resourceId('Microsoft.Authorization/roleDefinitions', variables('customEmailContributorRoleId'))]",
                "[variables('acsAccountId')]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(variables('storageAccountId'), variables('managedIdentityName'), 'StorageBlobDataContributor')]",
            "scope": "[variables('storageAccountId')]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('storageBlobContributorRoleId'))]",
                "principalId": "[reference(variables('managedIdentityResourceId'), '2024-11-30').principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[variables('managedIdentityResourceId')]",
                "[variables('storageAccountId')]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "scope": "[variables('kvResourceId')]",
            "name": "[guid(variables('kvResourceId'), variables('managedIdentityName'), 'KeyValutSecretsUser')]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('kvSecretsUserRoleId'))]",
                "principalId": "[reference(variables('managedIdentityResourceId'), '2024-11-30').principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[variables('managedIdentityResourceId')]",
                "[variables('kvResourceId')]"
            ]
        },

        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2024-05-01",
            "location": "[parameters('location')]",
            "name": "[variables('vnetName')]",
            "tags": "[variables('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2024-05-01",
            "name": "[format('{0}/{1}', variables('vnetName'), variables('appServiceSubnetName'))]",
            "properties": {
                "addressPrefix": "[variables('appServiceSubnetPrefix')]",
                "delegations": [
                    {
                        "name": "dlg-appService",
                        "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetId')]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2024-05-01",
            "name": "[format('{0}/{1}', variables('vnetName'), variables('databaseSubnetName'))]",
            "properties": {
                "addressPrefix": "[variables('databaseSubnetPrefix')]",
                "delegations": [
                    {
                        "name": "dlg-database",
                        "properties": {
                            "serviceName": "[variables('databaseServiceName')]"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('appSubnetId')]"

            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2024-05-01",
            "name": "[format('{0}/{1}', variables('vnetName'), variables('kvSubnetName'))]",
            "properties": {
                "addressPrefix": "[variables('kvSubnetPrefix')]",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.KeyVault"
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('appSubnetId')]",
                "[variables('databaseSubnetId')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2024-06-01",
            "name": "[variables('kvPrivateDnsZoneName')]",
            "location": "global",
            "tags": "[variables('tags')]",
            "properties": {},
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('appSubnetId')]",
                "[variables('databaseSubnetId')]",
                "[variables('kvSubnetId')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2024-06-01",
            "name": "[format('{0}/{1}', variables('kvPrivateDnsZoneName'), 'vnet-link')]",
            "location": "global",
            "properties": {
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                },
                "registrationEnabled": false
            },
            "dependsOn": [
                "[variables('kvPrivateDnsZoneId')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2024-06-01",
            "name": "[variables('dbPrivateDnsZoneName')]",
            "location": "global",
            "tags": "[variables('tags')]",
            "properties": {},
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('appSubnetId')]",
                "[variables('databaseSubnetId')]",
                "[variables('kvSubnetId')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2024-06-01",
            "name": "[format('{0}/{1}', variables('dbPrivateDnsZoneName'), 'vnet-link')]",
            "location": "global",
            "properties": {
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                },
                "registrationEnabled": false
            },
            "dependsOn": [
                "[variables('dbPrivateDnsZoneId')]"
            ]
        },

        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2024-11-01",
            "name": "[variables('kvName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "properties": {
                "createMode": "Default",
                "sku": {
                    "family": "A",
                    "name": "[variables('kvSku')]"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [],
                "enableRbacAuthorization": "[variables('kvEnabledRbac')]",
                "enabledForTemplateDeployment": true,
                "enabledForDeployment": true,
                "publicNetworkAccess": "[variables('kvPublicNetworkAccess')]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "deny"
                }

            },
            "dependsOn": [
                "[variables('kvVnetLinkResourceId')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2024-05-01",
            "name": "[variables('kvPrivateEndpointName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "properties": {
                "subnet": {
                    "id": "[variables('kvSubnetId')]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "kvPrivateLink",
                        "properties": {
                            "privateLinkServiceId": "[variables('kvResourceId')]",
                            "groupIds": [ "[variables('kvPrivateEndpointGroupName')]" ]
                        }
                    }
                ],
                "customDnsConfigs": [
                    {
                        "fqdn": "[concat(variables('kvName'), variables('kvPublicDNSZoneForwarder'))]"
                    }
                ]
            },
            "dependsOn": [
                "[variables('kvVnetLinkResourceId')]",
                "[variables('kvResourceId')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2024-05-01",
            "name": "[concat(variables('kvPrivateEndpointName'),'/', variables('kvPrivateEndpointGroupName'), 'PrivateDnsZoneGroup')]",
            "location": "[parameters('location')]",
            "properties": {
                "privateDnsZoneConfigs": [
                {
                    "name": "dnsConfig",
                    "properties": {
                        "privateDnsZoneId": "[variables('kvPrivateDnsZoneId')]"
                    }
                }
                ]
            },
            "dependsOn": [
                "[variables('kvResourceId')]",
                "[variables('kvPrivateDnsZoneId')]",
                "[variables('kvPrivateEndpointId')]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2024-11-01",
            "name": "[format('{0}-{1}', parameters('appName'), 'strapiSecretGeneration')]",
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "kvName": {
                        "value": "[variables('kvName')]"
                    },
                    "databaseAdminPassword": {
                        "value": "[parameters('databaseAdminPassword')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "managedIdentityResourceId": {
                        "value": "[variables('managedIdentityResourceId')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "kvName": {
                            "type": "string"
                        },
                        "databaseAdminPassword": {
                            "type": "securestring"
                        },
                        "location": {
                            "type": "string"
                        },
                        "managedIdentityResourceId": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "strapiSecrets": [
                            {
                                "name": "StrapiAppKeys",
                                "scriptOutputKey": "strapiAppKeys"
                            },
                            {
                                "name": "StrapiJwtSecret",
                                "scriptOutputKey": "strapiJwtSecret"
                            },
                            {
                                "name": "StrapiAdminJwtSecret",
                                "scriptOutputKey": "strapiAdminJwtSecret"
                            },
                            {
                                "name": "StrapiApiTokenSalt",
                                "scriptOutputKey": "strapiApiTokenSalt"
                            },
                            {
                                "name": "StrapiTransferTokenSalt",
                                "scriptOutputKey": "strapiTransferTokenSalt"
                            }
                        ],
                        "scriptUri": "https://raw.githubusercontent.com/Azure-Samples/strapi-on-appservice-sample/refs/heads/main/scripts/Get-StrapiSecrets.ps1"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Resources/deploymentScripts",
                            "apiVersion": "2023-08-01",
                            "name": "generateStrapiSecrets",
                            "location": "[parameters('location')]",
                            "kind": "AzurePowerShell",
                            "properties": {
                                "azPowerShellVersion": "13.2",
                                "primaryScriptUri": "[variables('scriptUri')]",
                                "cleanupPreference": "Always",
                                "retentionInterval": "PT1H",
                                "timeout": "PT5M"
                            },
                            "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                    "[parameters('managedIdentityResourceId')]": {}
                                }
                            }
                        },
                        {
                            "type": "Microsoft.KeyVault/vaults/secrets",
                            "apiVersion": "2024-11-01",
                            "name": "[format('{0}/{1}', parameters('kvName'), 'DatabaseAdminPassword')]",
                            "properties": {
                                "attributes": {
                                    "enabled": true
                                },
                                "value": "[parameters('databaseAdminPassword')]"
                            }
                        },
                        {
                            "copy": {
                                "name": "secretsCopy",
                                "count": "[length(variables('strapiSecrets'))]"
                            },
                            "type": "Microsoft.KeyVault/vaults/secrets",
                            "apiVersion": "2024-11-01",
                            "name": "[concat(parameters('kvName'), '/', variables('strapiSecrets')[copyIndex('secretsCopy')].name)]",
                            "properties": {
                                "attributes": {
                                    "enabled": true
                                },
                                "value": "[reference('generateStrapiSecrets').outputs[variables('strapiSecrets')[copyIndex('secretsCopy')].scriptOutputKey]]"
                            },
                            "dependsOn": [
                                "generateStrapiSecrets"
                            ]
                        }
                    ],
                    "outputs": {
                        "databaseAdminPwdUri": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), 'DatabaseAdminPassword'), '2024-11-01').secretUriWithVersion]"
                        },
                        "strapiAppKeysUri": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), 'StrapiAppKeys'), '2024-11-01').secretUriWithVersion]"
                        },
                        "strapiJwtSecretUri": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), 'StrapiJwtSecret'), '2024-11-01').secretUriWithVersion]"
                        },
                        "strapiAdminJwtSecretUri": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), 'StrapiAdminJwtSecret'), '2024-11-01').secretUriWithVersion]"
                        },
                        "strapiApiTokenSaltUri": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), 'StrapiApiTokenSalt'), '2024-11-01').secretUriWithVersion]"
                        },
                        "strapiTransferTokenSaltUri": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), 'StrapiTransferTokenSalt'), '2024-11-01').secretUriWithVersion]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[variables('kvPrivateZoneGroupResourceId')]",
                "[variables('managedIdentityResourceId')]"
            ]
        },

        {
            "type": "Microsoft.Communication/emailServices",
            "apiVersion": "2023-04-01",
            "name": "[variables('emailCommServiceName')]",
            "location": "[variables('acsLocation')]",
            "tags": "[variables('tags')]",
            "properties": {
                "dataLocation": "[parameters('emailDataLocation')]"
            }
        },
        {
            "type": "Microsoft.Communication/communicationServices",
            "apiVersion": "2023-04-01",
            "name": "[variables('commServiceName')]",
            "location": "[variables('acsLocation')]",
            "tags": "[variables('tags')]",
            "properties": {
                "dataLocation": "[parameters('emailDataLocation')]",
                "linkedDomains": [
                    "[variables('ecsAccountId')]"
                ]
            },
            "dependsOn": [
                "[variables('ecsAccountId')]"
            ]
        },
        {
            "type": "Microsoft.Communication/emailServices/domains",
            "apiVersion": "2023-04-01",
            "name": "[concat(variables('emailCommServiceName'), '/', variables('emailDomainTitle'))]",
            "location": "[variables('acsLocation')]",
            "properties": {
                "domainManagement": "[variables('acsDomainManagement')]",
                "userEngagementTracking": "[variables('enableAcsEngagementTracking')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Communication/emailServices', variables('emailCommServiceName'))]"
            ]
        },
        {
            "type": "Microsoft.Communication/emailServices/domains/senderUsernames",
            "apiVersion": "2023-04-01",
            "name": "[concat(variables('emailCommServiceName'), '/', variables('emailDomainTitle'), '/', variables('acsSenderName'))]",
            "properties": {
                "displayName": "[variables('acsSenderName')]",
                "username": "[variables('acsSenderName')]"
            },
            "dependsOn": [
                "[variables('ecsAccountId')]"
            ]
        },

        {
            "condition": "[not(variables('isPostgres'))]",
            "type": "Microsoft.DBforMySQL/flexibleServers",
            "apiVersion": "2023-12-30",
            "name": "[variables('databaseServerName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "sku": {
                "name": "[variables('dbSkuName')]",
                "tier": "[variables('serverEdition')]"
            },
            "properties": {
                "createMode": "Default",
                "version": "[variables('databaseVersion')]",
                "administratorLogin": "[parameters('databaseAdminUsername')]",
                "administratorLoginPassword": "[parameters('databaseAdminPassword')]",
                "highAvailability": {
                    "mode": "[variables('highAvailability')]"
                },
                "network": {
                    "publicNetworkAccess": "[variables('databasePublicNetworkAccess')]",
                    "DelegatedSubnetResourceId": "[variables('databaseSubnetId')]",
                    "PrivateDnsZoneResourceId": "[variables('dbPrivateDnsZoneId')]"
                },
                "storage": {
                    "autoGrow": "[variables('storageAutoGrow')]",
                    "storageSizeGB": "[variables('storageSizeGB')]",
                    "autoIoScaling": "[variables('storageAutoIoScaling')]",
                    "storageRedundancy": "[variables('mySqlStorageRedundancy')]"
                },
                "backup": {
                    "backupRetentionDays": "[variables('backupRetentionDays')]"
                }
            },
            "dependsOn": [
                "[variables('dbVnetLinkResourceId')]",
                "[variables('databaseSubnetId')]"
            ]
        },
        {
            "condition": "[not(variables('isPostgres'))]",
            "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
            "apiVersion": "2023-12-30",
            "name": "[format('{0}/{1}', variables('databaseServerName'), 'sql_generate_invisible_primary_key')]",
            "properties": {
                "value": "OFF"
            },
            "dependsOn": [
                "[variables('databaseServerId')]"
            ]
        },
        {
            "condition": "[not(variables('isPostgres'))]",
            "type": "Microsoft.DBforMySQL/flexibleServers/databases",
            "name": "[format('{0}/{1}', variables('databaseServerName'), variables('databaseName'))]",
            "apiVersion": "2023-12-30",
            "properties": {
                "charset": "[variables('databaseCharset')]",
                "collation": "[variables('databaseCollation')]"
            },
            "dependsOn": [
                "[variables('databaseServerId')]"
            ]
        },

        {
            "condition": "[variables('isPostgres')]",
            "type": "Microsoft.DBforPostgreSQL/flexibleServers",
            "apiVersion": "2024-11-01-preview",
            "name": "[variables('databaseServerName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "sku": {
                "name": "[variables('dbSkuName')]",
                "tier": "[variables('serverEdition')]"
            },
            "properties": {
                "createMode": "Default",
                "version": "[variables('databaseVersion')]",
                "administratorLogin": "[parameters('databaseAdminUsername')]",
                "administratorLoginPassword": "[parameters('databaseAdminPassword')]",
                "authConfig": {
                    "activeDirectoryAuth": "Disabled",
                    "passwordAuth": "Enabled"
                },
                "backup": {
                    "backupRetentionDays": "[variables('backupRetentionDays')]"
                },
                "highAvailability": {
                    "mode": "[variables('highAvailability')]"
                },
                "network": {
                    "publicNetworkAccess": "[variables('databasePublicNetworkAccess')]",
                    "delegatedSubnetResourceId": "[variables('databaseSubnetId')]",
                    "privateDnsZoneArmResourceId": "[variables('dbPrivateDnsZoneId')]"
                },
                "storage": {
                    "autoGrow": "[variables('storageAutoGrow')]",
                    "storageSizeGB": "[variables('storageSizeGB')]",
                    "tier": "[variables('postgresStorageDiskTier')]",
                    "type": "[variables('postgresStorageDiskType')]"
                }
            },
            "dependsOn": [
                "[variables('dbVnetLinkResourceId')]",
                "[variables('databaseSubnetId')]"
            ]
        },
        {
            "condition": "[variables('isPostgres')]",
            "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
            "name": "[format('{0}/{1}', variables('databaseServerName'), variables('databaseName'))]",
            "apiVersion": "2024-11-01-preview",
            "properties": {
                "charset": "[variables('databaseCharset')]",
                "collation": "[variables('databaseCollation')]"
            },
            "dependsOn": [
                "[variables('databaseServerId')]"
            ]
        },

        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2024-04-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "numberOfWorkers": "[variables('numberOfWorkers')]",
                "reserved": true
            },
            "sku": {
                "name": "[variables('skuName')]",
                "tier": "[variables('skuTier')]",
                "capacity": 1
            },
            "kind": "app,linux"
        },
        {
            "name": "[parameters('appName')]",
            "type": "Microsoft.Web/sites",
            "apiVersion": "2024-04-01",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "properties": {
                "name": "[parameters('appName')]",
                "serverFarmId": "[variables('serverFarmId')]",
                "httpsOnly": true,
                "publicNetworkAccess": "[variables('publicNetworkAccess')]",
                "autoGeneratedDomainNameLabelScope": "[variables('autoGeneratedDomainNameLabelScope')]",
                "clientAffinityEnabled": false,
                "keyVaultReferenceIdentity": "[variables('managedIdentityResourceId')]",
                "siteConfig": {
                    "linuxFxVersion": "[variables('linuxFxVersion')]",
                    "appCommandLine": "[variables('startupCommand')]",
                    "alwaysOn": "[variables('alwaysOn')]",
                    "appSettings": [
                        {
                            "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                            "value": "[variables('containerStartTimeLimit')]"
                        },
                        {
                            "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                            "value": "[variables('scmDoBuildDuringDeployment')]"
                        },
                        {
                            "name": "PORT",
                            "value": "[variables('websitePort')]"
                        },
                        {
                            "name": "NODE_ENV",
                            "value": "[parameters('applicationMode')]"
                        },
                        {
                            "name": "ENTRA_CLIENT_ID",
                            "value": "[reference(variables('managedIdentityResourceId'), '2024-11-30').clientId]"
                        },
                        {
                            "name": "DATABASE_CLIENT",
                            "value": "[parameters('databaseClient')]"
                        },
                        {
                            "name": "DATABASE_HOST",
                            "value": "[reference(resourceId(variables('databaseServiceName'), variables('databaseServerName')), variables('databaseApiVersion')).fullyQualifiedDomainName]"
                        },
                        {
                            "name": "DATABASE_PORT",
                            "value": "[variables('databasePort')]"
                        },
                        {
                            "name": "DATABASE_NAME",
                            "value": "[variables('databaseName')]"
                        },
                        {
                            "name": "DATABASE_USERNAME",
                            "value": "[parameters('databaseAdminUsername')]"
                        },
                        {
                            "name": "DATABASE_PASSWORD",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('secretGenerateDeploymentId')).outputs.databaseAdminPwdUri.value, ')')]"
                        },
                        {
                            "name": "DATABASE_SSL",
                            "value": "[variables('databaseSsl')]"
                        },
                        {
                            "name": "STORAGE_AUTH_TYPE",
                            "value": "[variables('storageAuthType')]"
                        },
                        {
                            "name": "STORAGE_ACCOUNT_NAME",
                            "value": "[variables('storageAccountName')]"
                        },
                        {
                            "name": "BLOB_CONTAINER_NAME",
                            "value": "[variables('blobContainerName')]"
                        },
                        {
                            "name": "BLOB_STORAGE_URL",
                            "value": "[reference(variables('storageAccountId'), '2024-01-01').primaryEndpoints.blob]"
                        },
                        {
                            "name": "APP_KEYS",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('secretGenerateDeploymentId')).outputs.strapiAppKeysUri.value, ')')]"
                        },
                        {
                            "name": "ADMIN_JWT_SECRET",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('secretGenerateDeploymentId')).outputs.strapiAdminJwtSecretUri.value, ')')]"
                        },
                        {
                            "name": "JWT_SECRET",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('secretGenerateDeploymentId')).outputs.strapiJwtSecretUri.value, ')')]"
                        },
                        {
                            "name": "API_TOKEN_SALT",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('secretGenerateDeploymentId')).outputs.strapiApiTokenSaltUri.value, ')')]"
                        },
                        {
                            "name": "TRANSFER_TOKEN_SALT",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('secretGenerateDeploymentId')).outputs.strapiTransferTokenSaltUri.value, ')')]"
                        },
                        {
                            "name": "AZURE_EMAIL_SERVICE_ENDPOINT",
                            "value": "[concat('https://', reference(variables('acsAccountId')).hostName, '/')]"
                        },
                        {
                            "name": "FROM_EMAIL",
                            "value": "[concat( variables('acsSenderName'),'@',reference(variables('ecsAccountId')).mailFromSenderDomain)]"
                        }
                    ]
                }
            },
            "identity": {
                "type": "UserAssigned",
                "UserAssignedIdentities": {
                    "[variables('managedIdentityResourceId')]": {}
                }
            },
            "dependsOn": [
                "[variables('serverFarmId')]",
                "[resourceId(variables('databaseResouceType'), variables('databaseServerName'), variables('databaseName'))]",
                "[variables('acsAccountId')]",
                "[variables('managedIdentityResourceId')]",
                "[variables('kvPrivateZoneGroupResourceId')]",
                "[variables('secretGenerateDeploymentId')]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccountName'), 'default', variables('blobContainerName'))]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2024-11-01",
            "name": "[format('{0}-{1}', parameters('appName'), 'networkConfigurations')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Web/sites/networkConfig",
                            "name": "[format('{0}/{1}', parameters('appName'), 'virtualNetwork')]",
                            "apiVersion": "2024-04-01",
                            "location": "[parameters('location')]",
                            "properties": {
                                "subnetResourceId": "[variables('appSubnetId')]"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[variables('webAppResourceId')]",
                "[variables('dbVnetLinkResourceId')]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2024-11-01",
            "name": "[format('{0}-{1}', parameters('appName'), 'bpcpConfigurations')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                            "name": "[concat(parameters('appName'), '/scm')]",
                            "apiVersion": "2024-04-01",
                            "properties": {
                                "allow": "false"
                            }
                        },
                        {
                            "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                            "name": "[concat(parameters('appName'), '/ftp')]",
                            "apiVersion": "2024-04-01",
                            "properties": {
                                "allow": "false"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[variables('webAppResourceId')]"
            ]
        },
        {
            "condition": "[not(variables('isAppInProdMode'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2024-11-01",
            "name": "[format('{0}-{1}', parameters('appName'), 'oneDeploy')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Resources/deploymentScripts",
                            "apiVersion": "2023-08-01",
                            "name": "[format('{0}-{1}', parameters('appName'), 'deployDelayScript')]",
                            "location": "[parameters('location')]",
                            "kind": "AzurePowerShell",
                            "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                    "[variables('managedIdentityResourceId')]": {}
                                }
                            },
                            "properties": {
                                "azPowerShellVersion": "13.2",
                                "scriptContent": "Start-Sleep -Seconds 30",
                                "cleanupPreference": "Always",
                                "retentionInterval": "PT1H",
                                "timeout": "PT5M"
                            }
                        },
                        {
                            "type": "Microsoft.Web/sites/extensions",
                            "name": "[format('{0}/{1}', parameters('appName'), 'onedeploy')]",
                            "apiVersion": "2024-04-01",
                            "location": "[parameters('location')]",
                            "properties": {
                                "type": "zip",
                                "packageUri": "[variables('artifactLocation')]"
                            },
                            "dependsOn": [
                                "[resourceId('Microsoft.Resources/deploymentScripts', format('{0}-{1}', parameters('appName'), 'deployDelayScript'))]"
                            ]
                        }
                    ]
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}', parameters('appName'), 'networkConfigurations'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}', parameters('appName'), 'bpcpConfigurations'))]",
                "[variables('managedIdentityResourceId')]"
            ]
        },

        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2024-01-01",
            "location": "[parameters('location')]",
            "properties": {
                "accessTier": "[variables('accessTier')]",
                "minimumTlsVersion": "[variables('minimumTlsVersion')]",
                "supportsHttpsTrafficOnly": "[variables('supportsHttpsTrafficOnly')]",
                "allowBlobPublicAccess": "[parameters('storageAccountPublicAccessEnabled')]",
                "allowSharedKeyAccess": "[variables('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[variables('defaultToOAuthAuthentication')]",
                "networkAcls": {
                    "bypass": "[variables('networkAclsBypass')]",
                    "defaultAction": "[variables('networkAclsDefaultAction')]"
                },
                "encryption": {
                    "keySource": "[variables('keySource')]",
                    "services": {
                        "blob": {
                            "enabled": "[variables('encryptionEnabled')]"
                        },
                        "file": {
                            "enabled": "[variables('encryptionEnabled')]"
                        },
                        "table": {
                            "enabled": "[variables('encryptionEnabled')]"
                        },
                        "queue": {
                            "enabled": "[variables('encryptionEnabled')]"
                        }
                    }
                }
            },
            "kind": "[variables('storageAccountKind')]",
            "tags": "[variables('tags')]",
            "sku": {
                "name": "[variables('storageAccountType')]"
            }
        },
        {
            "name": "[format('{0}/{1}', variables('storageAccountName'), variables('blobServiceName'))]",
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2024-01-01",
            "properties": {
                "deleteRetentionPolicy": {
                    "enabled": "[variables('deleteRetentionPolicy').enabled]",
                    "days": "[variables('deleteRetentionPolicy').days]"
                },
                "containerDeleteRetentionPolicy": {
                    "enabled": "[variables('containerDeleteRetentionPolicy').enabled]",
                    "days": "[variables('containerDeleteRetentionPolicy').days]"
                }
            },
            "dependsOn": [
                "[variables('storageAccountId')]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2024-01-01",
            "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), variables('blobServiceName'), variables('blobContainerName'))]",
            "properties": {
                "publicAccess": "[variables('blobPublicAccessLevel')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), variables('blobServiceName'))]"
            ]
        }
    ]
}
